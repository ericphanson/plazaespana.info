name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'
          cache: true

      - name: Check formatting
        run: |
          if [ -n "$(gofmt -l .)" ]; then
            echo "The following files are not formatted:"
            gofmt -l .
            exit 1
          fi

      - name: Run tests
        run: |
          # Test each package individually to see exactly where failures occur
          for pkg in $(go list ./...); do
            echo "Testing package: $pkg"
            if ! go test -v "$pkg"; then
              echo "FAILED: $pkg"
              exit 1
            fi
          done

      - name: Build native binary
        run: go build -v -trimpath -ldflags="-s -w" -o build/buildsite ./cmd/buildsite

      - name: Build FreeBSD binary (cross-compile)
        run: GOOS=freebsd GOARCH=amd64 CGO_ENABLED=0 go build -trimpath -ldflags="-s -w" -o build/buildsite ./cmd/buildsite

      - name: Verify FreeBSD binary was created
        run: |
          ls -lh build/buildsite
          file build/buildsite

      - name: Upload FreeBSD binary
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: buildsite-freebsd
          path: build/buildsite
          retention-days: 1

  deploy:
    name: Deploy to NFSN
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Download FreeBSD binary
        uses: actions/download-artifact@v4
        with:
          name: buildsite-freebsd
          path: build/

      - name: Hash CSS
        run: ./scripts/hash-assets.sh

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.NFSN_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.NFSN_HOST }} >> ~/.ssh/known_hosts

      - name: Create remote directories
        run: |
          ssh ${{ secrets.NFSN_USER }}@${{ secrets.NFSN_HOST }} \
            'mkdir -p /home/bin /home/data /home/public/assets /home/templates'

      - name: Deploy binary
        run: |
          chmod +x build/buildsite
          scp build/buildsite ${{ secrets.NFSN_USER }}@${{ secrets.NFSN_HOST }}:/home/bin/buildsite

      - name: Deploy config
        run: scp config.toml ${{ secrets.NFSN_USER }}@${{ secrets.NFSN_HOST }}:/home/config.toml

      - name: Deploy templates
        run: scp templates/index-grouped.tmpl.html ${{ secrets.NFSN_USER }}@${{ secrets.NFSN_HOST }}:/home/templates/index-grouped.tmpl.html

      - name: Deploy CSS
        run: scp public/assets/site.*.css ${{ secrets.NFSN_USER }}@${{ secrets.NFSN_HOST }}:/home/public/assets/

      - name: Deploy .htaccess
        run: scp ops/htaccess ${{ secrets.NFSN_USER }}@${{ secrets.NFSN_HOST }}:/home/public/.htaccess

      - name: Set permissions
        run: |
          ssh ${{ secrets.NFSN_USER }}@${{ secrets.NFSN_HOST }} \
            'chmod +x /home/bin/buildsite'

      - name: Regenerate site
        run: |
          ssh ${{ secrets.NFSN_USER }}@${{ secrets.NFSN_HOST }} \
            '/home/bin/buildsite -config /home/config.toml -out-dir /home/public -data-dir /home/data -fetch-mode production'
